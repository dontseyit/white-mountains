name: Dev CD

on:
  push:
    branches:
      - 'releases/**'
      # you may add other branches to
      # activate deployment for them, too.

jobs:
  check_semantic_tag_format:
    runs-on: ubuntu-latest
    outputs:
      # export to be used in other jobs
      version: ${{ steps.check_semantic_tag_format.outputs.tag_name }}
      branch: ${{ steps.get_commit_version.outputs.branch }}
    steps:
      - uses: actions/checkout@v3
        name: Check out code

      - id: check_semantic_tag_format
        name: Check tag format
        run: |
          TAG_NAME=$(git describe --tags --abbrev=0)
          if [[ "$TAG_NAME" =~ ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$ ]]; then
            echo "Tag format is valid"
          else
            echo "Invalid tag format: $TAG_NAME"
            exit 1
          fi
          # set as output:
          BRANCH="$(git rev-parse --abbrev-ref HEAD)"
          echo "commit branch: $BRANCH"
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "tag name: $TAG_NAME"
          echo "version=$TAG_NAME" >> $GITHUB_OUTPUT

  check_python_package_version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python environment
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Check package version matches tag
        run: |
          PACKAGE_VERSION=$(python setup.py --version)
          TAG_NAME=$(git describe --tags --abbrev=0)
          if [[ "$PACKAGE_VERSION" == "$TAG_NAME" ]]; then
            echo "Package version matches tag"
          else
            echo "Package version $PACKAGE_VERSION does not match tag $TAG_NAME"
            exit 1
          fi

  push_to_docker_hub:
    runs-on: ubuntu-latest
    needs: check_semantic_tag_format
    steps:
      - uses: actions/checkout@v3
        name: Check out code

      - uses: docker/setup-qemu-action@v2.0.0
        name: Set up QEMU

      - uses: docker/setup-buildx-action@v2.0.0
        name: Set up Docker Buildx

      - uses: docker/login-action@v2.0.0
        name: Login to DockerHub
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: docker/build-push-action@v3.0.0
        name: Build and push
        id: docker_build
        with:
          push: true
          #       platforms: linux/amd64,linux/arm64/v8
          tags: "ghga/${{ github.event.repository.name }}:${{ needs.check_semantic_tag_format.outputs.version }},ghga/${{ github.event.repository.name }}:${{ needs.check_semantic_tag_format.outputs.branch }}"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "docker.io/ghga/${{ github.event.repository.name }}:${{ needs.check_semantic_tag_format.outputs.version }}"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  ## Please uncomment and adapt the DEPLOYMENT_CONFIG_REPO to trigger automatic
  ## updates of helm charts:
  # update_deployment_repo:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - check_semantic_tag_format
  #     - push_to_docker_hub
  #   env:
  #     DEPLOYMENT_CONFIG_REPO: ghga-de/helm
  #   steps:
  #     - name: trigger update in deployment repo
  #       run: |
  #         # access token needs to be of format: <username>:<personal_access_token>
  #         curl -X POST \
  #           "https://api.github.com/repos/${DEPLOYMENT_CONFIG_REPO}/dispatches" \
  #           -H 'Accept: application/vnd.github.everest-preview+json' \
  #           -u '${{ secrets.DEPLOYMENT_UPDATE_TOKEN }}' \
  #           --data '{
  #             "event_type": "new_app_version",
  #             "client_payload": {
  #               "deploy_filename": "${{ github.event.repository.name }}",
  #               "app_name": "${{ github.event.repository.name }}",
  #               "context": "${{ needs.check_semantic_tag_format.outputs.branch }}",
  #               "new_image_tag": "${{ needs.check_semantic_tag_format.outputs.version }}"
  #             }
  #           }'
